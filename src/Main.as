package{	import be.colorfield.ui.Application;	import be.colorfield.ui.layout.MainGUI;		import noponies.ui.NpContextMenu;		// import com.adobe.viewsource.ViewSource;	import flash.display.*;	import flash.events.ContextMenuEvent;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;			/** 	 * Classe de document (référencée dans le document Flash)<br />	 * étend la classe Application (qui elle-même étend MovieClip)<br />	 * afin de disposer d'une référence globale à stage pour les objets NON graphiques.	 * 	 * TODO : la gestion du SlideShow pourrait être revue : 	 * utilisation de classes (à écrire) XMLIterator et XMLCollection	 *	 * TODO : un paramètre booléen pourrait permettre l'affichage d'outils de debug 	 * et de suivi des performances pour faciliter le passage entre les	 * phases de développement / production	 * 	 */	public class Main extends Application	{		// Vitesse d'animation		private static const STAGE_FRAME_RATE:int = 50;				// Libellés du menu contextuel		private static const FULLSCREEN_ENTER:String = "Mode plein écran";		private static const FULLSCREEN_EXIT:String = "Sortir du mode plein écran";		private static const SPLASHSCREEN:String = "Retour à l'écran d'accueil";		private static const DRUPALSITE:String = "Site du rapport";				// Composition		private var mainGUI:MainGUI;		private var contextM:NpContextMenu;				/**		 *  <b>Constructeur</b><br />		 *  Ecoute de l'événement init (chargement complet du swf)		 */		public function Main()		{			this.loaderInfo.addEventListener(Event.INIT,loaderInit);		}				/**		 *  Définition 		 * 	<ul><li>des propriétés et écouteurs de stage</li>		 *  <li>du menu contextuel</li></ul>		 */		 private function loaderInit(event:Event):void		 {			 			// supprime l'écouteur init			this.removeEventListener(Event.INIT,loaderInit);			 			// configure stage			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.frameRate = STAGE_FRAME_RATE;						// écoute de l'événement d'affichage en plein écran			stage.addEventListener(Event.FULLSCREEN, fullScreenHandler);						// configure le menu contextuel			contextM = new NpContextMenu(this);			contextM.addMenuItem(FULLSCREEN_ENTER, false);			contextM.addMenuItem(FULLSCREEN_EXIT, false);			contextM.addMenuItem(SPLASHSCREEN, true);			contextM.addMenuItem(DRUPALSITE, true);			// masque exit fullscreen par défaut			contextM.hideMenuItem(FULLSCREEN_EXIT);						// ajout d'un écouteur de sélection du menu contextuel			contextM.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,handleMenuSelection);						// création de la view principale (comprend le template et le gestionnaire d'écrans)			mainGUI = MainGUI.getInstance();			addChild(mainGUI);						// permet d'accéder au code source de l'application 			// -> ne fonctionne pas sous Flash, uniquement Flex (...)			// ViewSource.addMenuItem(this, "srcview/index.html");					}				//--------------------------------------		//  GESTION DU PLEIN ECRAN		//--------------------------------------		private function goFullScreen(event:MouseEvent = null):void {			stage.displayState = StageDisplayState.FULL_SCREEN;		}				private function exitFullScreen():void {			stage.displayState = StageDisplayState.NORMAL;		}				// Ecouteur d'événement qui permet un toggle 		// des élements du menu contextuel (entrée / sortie du mode plein écran)		private function fullScreenHandler(event:FullScreenEvent):void {			if (event.fullScreen) {				contextM.hideMenuItem(FULLSCREEN_ENTER);				contextM.showMenuItem(FULLSCREEN_EXIT);			} else {				contextM.hideMenuItem(FULLSCREEN_EXIT);				contextM.showMenuItem(FULLSCREEN_ENTER);			}		}				//--------------------------------------		//  MENU CONTEXTUEL		//--------------------------------------				// écouteur gérant les entrées du menu contextuel		private function handleMenuSelection(event:ContextMenuEvent):void {			switch (contextM.selectedMenu) {				case SPLASHSCREEN :					var request1:URLRequest = new URLRequest("http://stellarsystem.hypercube.be/");					navigateToURL(request1, "_self");					break;				case DRUPALSITE :					var request2:URLRequest = new URLRequest("http://ei.hypercube.be/");					navigateToURL(request2, "_blank");					break;				case FULLSCREEN_EXIT :					exitFullScreen();					break;				case FULLSCREEN_ENTER :					goFullScreen();					break;			}					}			}}