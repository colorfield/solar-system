package be.colorfield.ui.layout {		import flash.display.MovieClip;	import flash.events.*;	import flash.system.System;	import flash.text.*;		import noponies.display.NpFullBrowserXShow;	import noponies.events.NpFbXShowEvent;	import noponies.net.LoadXmlToArray;		import org.sse.constant.PrivateParams;	/**	 * Configure l'outil de SlideShow plein écran créé par noponies	 * Vu qu'il est très consommateur en ressource, on le supprime dès qu'on	 * a quitté le premier écran	 * TODO : mesurer l'occupation RAM / CPU et en fonction le réactiver si on l'appelle	 */	public class MainBackgroundSlide extends MovieClip {		private var fullBrowserSlideShow:NpFullBrowserXShow;		private var ldrXML:LoadXmlToArray;				public function MainBackgroundSlide() {			// charge le XML et le convertit en array			// que l'on va passer à la classe responsable du SlideShow			ldrXML = new LoadXmlToArray(PrivateParams.PATH_DATA_XML + PrivateParams.FILE_XML_MAIN_SLIDE);			// xmlParsed aurait dû être une constante de la classe p.ex. LoadXmlToArray.XML_PARSED			// (utilisation d'une classe tierce)			ldrXML.addEventListener("xmlParsed", initSlides);			this.addEventListener(Event.REMOVED_FROM_STAGE,onRemovedFromStage);		}						private function onRemovedFromStage(e:Event):void		{			if(fullBrowserSlideShow != null){			trace("removed from stage");				this.removeEventListener(Event.REMOVED_FROM_STAGE,onRemovedFromStage);				fullBrowserSlideShow.removeEventListener(NpFbXShowEvent.SLIDE_CHANGE, handleSlideChange);				fullBrowserSlideShow.removeEventListener(ProgressEvent.PROGRESS, handleProgEvent);				fullBrowserSlideShow.removeEventListener(NpFbXShowEvent.BG_LOADED, handleLoadedEvent);								fullBrowserSlideShow = null;			}					}				// fonction de callBack pour le chargement du XML		// on peut donc instancier et configurer le SlideShow 		// + lui passer l'array contenant les images		private function initSlides(evt:Event):void {					fullBrowserSlideShow = new NpFullBrowserXShow(ldrXML.imagesArray);			fullBrowserSlideShow.slideCrossFadeTime = 2;			fullBrowserSlideShow.slideDisplayTime = 10;			fullBrowserSlideShow.randomPlayBack = true;			fullBrowserSlideShow.slidesLoop = true;			fullBrowserSlideShow.autoPlay = true;			fullBrowserSlideShow.slideAlignX=1;			fullBrowserSlideShow.slideAlignY=1;			addChildAt(fullBrowserSlideShow,0);					//configure les écouteurs d'événement			fullBrowserSlideShow.addEventListener(NpFbXShowEvent.SLIDE_CHANGE, handleSlideChange);			fullBrowserSlideShow.addEventListener(ProgressEvent.PROGRESS, handleProgEvent);			fullBrowserSlideShow.addEventListener(NpFbXShowEvent.BG_LOADED, handleLoadedEvent);						//si on veut utiliser des boutons suivant - précédent p.ex.			//next_btn.addEventListener(MouseEvent.CLICK, nextImage);			//disable le bouton next en attendant qu'on ait du contenu			//next_btn.mouseChildren = false;			//next_btn.buttonMode = true;		}		private function nextImage(event:MouseEvent):void {			// this.next_btn.btn_txt.text = "LOADING";			fullBrowserSlideShow.displayNewSlide();			//dispatchEvent(new NpFbXShowEvent(NpFbXShowEvent.LOAD_NEW_SLIDE,true));		}				private function handleSlideChange(event:Event):void {			//status_txt.text = "fullBrowserSlideShow.currentSlide + " / " + fullBrowserSlideShow.totalSlides			//memory_txt.text = "System.totalMemory / 1024 + " Kb";		}		private function handleLoadedEvent(event:Event):void {			//this.next_btn.alpha = 1;			//this.next_btn.btn_txt.text = "NEXT SLIDE";			//this.next_btn.mouseEnabled = true;			//next_btn.buttonMode = true;			//memory_txt.text = "System.totalMemory / 1024 + " Kb";		}				private function handleProgEvent(event:ProgressEvent):void {			//loaded_txt.text = event.bytesLoaded / 1000 + "KB sur" + event.bytesTotal / 1000 + "KB " 			//+ " =  " + uint(100 * event.bytesLoaded / event.bytesTotal) + "%";		}	}}