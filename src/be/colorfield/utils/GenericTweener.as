package be.colorfield.utils{	import flash.events.TimerEvent;	import flash.utils.Timer;			/**	 * @author richardolsson	 */	public class GenericTweener 	{		private static var _targets : Array = [];		private static var _timer : Timer;				private static function _startTimerIfNotRunning() : void		{			if (!_timer) {				_timer = new Timer(50);				_timer.addEventListener(TimerEvent.TIMER, _handleTimer_tick);			}						if (!_timer.running) {				_timer.reset();				_timer.start();			}		}		public static function tween(target : Object, duration : Number, properties : Object, ease : Function = null) : void		{			var t : SampleTweenerTarget = new SampleTweenerTarget(target, duration * 1000, properties, ease ||Â _linearEase);						_targets.push(t);						_startTimerIfNotRunning();		}						private static function _linearEase(t : Number, a : Number, b : Number, c : Number) : Number		{			return b*t/c + a;		}						private static function _handleTimer_tick(ev : TimerEvent) : void		{			var i : int;						for (i=0; i<_targets.length; i++) {				var target : SampleTweenerTarget = _targets[i];				var done : Boolean;								done = target.tick();								if (done) {					_targets.splice(i, 1);					target.dispose();					i--;				}			}						if (_targets.length == 0)				_timer.stop();		}	}}import flash.utils.getTimer;internal class SampleTweenerTarget{	private var _t : Number;	private var _t_start : Number;	private var _ease : Function;	private var _target : Object;	private var _duration : Number;	private var _properties : Object;	private var _properties_start : Object;	private var _properties_delta : Object;		public function SampleTweenerTarget(target : Object, duration : Number, properties : Object, ease : Function) : void	{		var prop : String;				_t_start = getTimer();				_target = target;		_duration = duration;		_properties = properties;		_ease = ease;				_properties_start = {};		_properties_delta = {};		for (prop in _properties) {			_properties_start[prop] = target[prop];			_properties_delta[prop] = properties[prop] - target[prop];		}	}		public function dispose() : void	{		_ease = null;		_target = null;		_properties = null;	}		public function tick() : Boolean	{		var prop : String;				_t = (getTimer() - _t_start) / _duration;				// Stop here		if (_t > 1.0)			return true;				// Tween all properties.		for (prop in _properties) {			_target[prop] = _ease(_t, _properties_start[prop], _properties_delta[prop], 1);		}				return false;	}}