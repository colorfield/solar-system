package org.sse.ui.control{		import be.colorfield.ui.layout.MainGUI;	import be.colorfield.ui.screen.IScreen;	import be.colorfield.ui.screen.ScreenManager;		import caurina.transitions.Tweener;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.MouseEvent;		import org.sse.ui.screen.*;
	/**	 * Menu principal de l'application SolarSystemExploration	 */	public class MainMenu extends MovieClip	{				// TODO 1 : définir les comportements généraux dans colorfield et étendre		// colorfield.ui.control.MainMenu		// TODO 2 : afficher clips et menus à partir d'un XML commun		// <screen menuLabel="" menuShortDescription="" menuTooltipDescription="">		//		<clips>		//			<clip className="" xPos="" yPos="" />		//		</clips>		//		<screen />		//		<screen />		// </screen>				// pour des questions de personnalisation graphique (apparences différentes),		// le nombre d'éléments est fixe		private static const NBR_ITEMS:int 		= 5;		// positions initiales et finales des sous-menus (pour leur animation)		private static const 	SM1_YPOS_END:int 	= -11;		private static const 	SM2_YPOS_END:int 	= -11;		internal static const 	SM1_YPOS_BEG:int 	= -191;		internal static const 	SM2_YPOS_BEG:int 	= -285;				// propriétés de l'animation		internal static const SM_EASING_TYPE:String = "easeInOutCubic";		internal static const SM_EASING_DURATION:Number = .4;				internal static var parentBtn:MovieClip = null;		internal static  var curBtn:MovieClip = null;				private var openedSubMenu:MovieClip = null;		//private var subMenuSolarSystem_mc:MainSubMenu;		//private var subMenuGoogleMaps_mc:MainSubMenu;				public function MainMenu()		{			setCurBtn(mainMenuBtn0_mc);			setEventsListeners();		}				//------------------------------------------------------------		// Gestion des événements de la souris		//------------------------------------------------------------				private function setCurBtn(mc:MovieClip){			curBtn = mc;			curBtn.gotoAndStop("btnActive");		}				private function closeOpenedSubMenus(e:MouseEvent = null){			if(openedSubMenu != null){				switch(openedSubMenu){					case subMenuSolarSystem_mc:						//trace("close SM1");						Tweener.addTween(subMenuSolarSystem_mc, {y:SM1_YPOS_BEG, time:SM_EASING_DURATION, transition:SM_EASING_TYPE});					break;					case subMenuGoogleMaps_mc:						//trace("close SM2");						Tweener.addTween(subMenuGoogleMaps_mc, {y:SM2_YPOS_BEG, time:SM_EASING_DURATION, transition:SM_EASING_TYPE});						break;				}			}		}						private function setEventsListeners():void		{			// Normalement, on ajouterait un listener global au conteneur (la classe MainMenu)			// cependant il faudrait ensuite faire le tri par rapport à tous les DisplayObject 			// présents dans celui-ci : TextField, Sprite, ... => moins performant						for (var i:int = 0; i < NBR_ITEMS; i++){				// => illustration : indispensable, si à true, on a background_mc				// comme target de l'événement				this["mainMenuBtn"+i+"_mc"].mouseChildren = false;				this["mainMenuBtn"+i+"_mc"].addEventListener(MouseEvent.CLICK, onClick);				this["mainMenuBtn"+i+"_mc"].addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);				this["mainMenuBtn"+i+"_mc"].addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);				this["mainMenuBtn"+i+"_mc"].buttonMode = true;				this["mainMenuBtn"+i+"_mc"].useHandCursor = true;			}						// création des instances des sous-menus			// => créés dans l'interface graphique pour une apparence personnalisée			/*			subMenuSolarSystem_mc = new SubMenuSolarSystem();			addChildAt(subMenu,0);			subMenuGoogleMaps_mc = new SubMenuSolarSystem();			addChildAt(subMenu,0);			*/			// délégué au sous-menu			// voir remarque sur le flag enableClose dans MainSubMenu			//subMenuSolarSystem_mc.addEventListener(MouseEvent.MOUSE_OUT, closeOpenedSubMenus);			//subMenuGoogleMaps_mc.addEventListener(MouseEvent.MOUSE_OUT, closeOpenedSubMenus);					}				private function onClick(e:MouseEvent):void		{			// trace("Click " + e.target.name);			// on désactive le précédent			curBtn.gotoAndStop("btnInactive");			// on active le courant			setCurBtn(e.target as MovieClip);			// on referme les sous-menus éventuellement ouverts			closeOpenedSubMenus();			// on appelle l'écran correspondant			getScreen(e.target as MovieClip);		}				private function onMouseOver(e:MouseEvent):void		{			if(e.target as MovieClip != curBtn){				e.target.gotoAndPlay("btnOver");			}						// masque les sous-menu si nécessaire			// (= aucun des 2 boutons concernés)			switch(e.target){				case mainMenuBtn0_mc:			    // désactivation temporaire du sous-menu				case mainMenuBtn1_mc:				case mainMenuBtn2_mc:				case mainMenuBtn4_mc:					closeOpenedSubMenus();					break;							}						// affichage d'un sous-menu si nécessaire			switch(e.target){				// sous-menu solarSystem				// désactivation temporaire				/*				case mainMenuBtn1_mc:					//trace("SM1 open");					openedSubMenu = subMenuSolarSystem_mc;					Tweener.addTween(subMenuSolarSystem_mc, {y:SM1_YPOS_END, time:SM_EASING_DURATION, transition:SM_EASING_TYPE});					parentBtn = e.target as MovieClip;					break;				*/					// sous-menu GoogleMaps				case mainMenuBtn3_mc:					//trace("SM2 open");					openedSubMenu = subMenuGoogleMaps_mc;					Tweener.addTween(subMenuGoogleMaps_mc, {y:SM2_YPOS_END, time:SM_EASING_DURATION, transition:SM_EASING_TYPE});					parentBtn = e.target as MovieClip;					break;				default :					openedSubMenu = null;					break;			}		}				private function onMouseOut(e:MouseEvent):void		{			if(e.target != curBtn){				e.target.gotoAndPlay("btnOut");			}					}		//------------------------------------------------------------		// Affichage des écrans correspondants		//------------------------------------------------------------		private function getScreen(mc:MovieClip){						var curScreen:IScreen;						switch(mc){				case mainMenuBtn0_mc:					//trace("News");					curScreen = new Screen01News();					break;				case mainMenuBtn1_mc:					//trace("Planets details");					curScreen = new Screen02PlanetsPerspective();					break;				case mainMenuBtn2_mc:					//trace("Sun");					curScreen = new Screen03Sun();					break;				case mainMenuBtn3_mc:					//trace("Hubble");					curScreen = new Screen04Hubble();					break;				case mainMenuBtn4_mc:					//trace("Voyage");					curScreen = new Screen05Voyage();					break;				default :					//trace("News (default)");					curScreen = new Screen01News();					break;			}						// affichage ou non du slideShow, selon le bouton cliqué			// (ou alors l'écran demandé...)			// pourrait être un paramètre lu depuis un fichier XML			if(mc == mainMenuBtn0_mc){				MainGUI.getInstance().addFullBackgroundSlide();				trace("Menu : add");			}else{				MainGUI.getInstance().removeFullBackgroundSlide();				trace("Menu : rm");			}									ScreenManager.getInstance().displayScreen(curScreen);						// opérations post affichage propres à chaque écran			// à sortir dans le ScreenManager			curScreen.postDisplayOperations();					}			}}