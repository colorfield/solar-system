package be.colorfield.ui.box{	import caurina.transitions.Tweener;		import flash.display.Sprite;	import flash.events.MouseEvent;	/**	 * Controller/View container pour les panels	 * TODO : disable bouton < quand premier	 *        disable bouton > quand dernier	 */	public class ScrollingPanels extends Sprite	{				public static const PANEL_WIDTH:int = 800;		public static const PANEL_HEIGHT:int = 600;		private static const PANEL_MARGIN:int = 5;				// on ajoute une marge, pour une scrollbar éventuelle		private static const MASK_MARGIN:int = 20;				private var panelModels:Vector.<ScrollablePanelModel>;		private var panelViews:Vector.<ScrollablePanelView>;				private var panelsContainer:Sprite;		private var panelsMask:Sprite;				private var curX:int = 0;		private var curScrollPos:int = 0;				// PanelArrow est une classe définie dans l'environnement graphique		private var leftArrow:PanelArrow;		private var rightArrow:PanelArrow;				public function ScrollingPanels()		{					}						private final function createControls():void{						leftArrow = new PanelArrow();			rightArrow = new PanelArrow();			// vu que PanelArrow est définie dans le sens "droite"			leftArrow.rotation -= 180;						leftArrow.addEventListener(MouseEvent.CLICK, leftClick)			rightArrow.addEventListener(MouseEvent.CLICK, rightClick)			leftArrow.buttonMode = rightArrow.buttonMode = true;						/*---------- A REMPLACER => Positionnement dans le layout ------*/						leftArrow.x = 200;			rightArrow.x = 600;			leftArrow.y = 400;			rightArrow.y = 400;							addChild(leftArrow);			addChild(rightArrow);					}				private function leftClick(event:MouseEvent):void {						// TODO : calculer précédent + bouton inactif			//if(curScrollPos < 0){ 				curScrollPos += PANEL_WIDTH; // TODO : margin				Tweener.addTween(panelsContainer,{x:curScrollPos, time:1, transition:"easeInOutQuint"});			//}		}				private function rightClick(event:MouseEvent):void {						// TODO : calculer précédent + bouton inactif			//if(curScrollPos > panelModels.length * PANEL_WIDTH){				curScrollPos -= PANEL_WIDTH;  // TODO : margin				Tweener.addTween(panelsContainer,{x:curScrollPos, time:1, transition:"easeInOutQuint"});			//}		}				private final function setMask():void{						panelsMask = new Sprite();			//panelsMask.width = PANEL_WIDTH + MASK_MARGIN;			//panelsMask.height = PANEL_HEIGHT + MASK_MARGIN;			//panelsMask.x = - MASK_MARGIN / 2;			//panelsMask.y = - MASK_MARGIN / 2;			panelsMask.graphics.lineStyle();			panelsMask.graphics.beginFill(0x000000);			panelsMask.graphics.drawRect(- MASK_MARGIN / 2,- MASK_MARGIN / 2,										PANEL_WIDTH + MASK_MARGIN,PANEL_HEIGHT + MASK_MARGIN);			panelsMask.graphics.endFill();						panelsContainer.mask = panelsMask;					}				public function createPanels(panelModels:Vector.<ScrollablePanelModel>):void{						this.panelsContainer = new Sprite();			addChild(panelsContainer);			this.panelModels = panelModels;			this.panelViews = new Vector.<ScrollablePanelView>;									var panel:ScrollablePanelView;						for(var i:int = 0; i < panelModels.length; ++i){								panel = new ScrollablePanelView();								trace(panelModels[i].getTitle() + " - " + panelModels[i].getContent());								panel.setTitle(panelModels[i].getTitle());				panel.setContent(panelModels[i].getContent());				panel.x = curX;				curX += PANEL_WIDTH + PANEL_MARGIN;								panelsContainer.addChild(panel);				panelViews.push(panel); // pas vraiment utile, mais par facilité							}						setMask();			createControls();		}	}}