/* AS3*Copyright 2008 noponies.*/package noponies.ui{	import fl.motion.easing.*;	import fl.transitions.Tween;	import fl.transitions.TweenEvent;		import flash.display.DisplayObject;	import flash.display.Stage;	import flash.events.EventDispatcher;	import flash.utils.Dictionary;	/**	* 	<strong>NpFlexLayout</strong>		* The NpFlexLayout class is a Display class that repositions objects passed to it when a stage resize event occurs.	* <p>The class has many parameters for creating flexible layouts. You are able to add and remove clips at runtime, specify the percentage of the stages height 	* and width a clip reflows to. Class supports an offset value in pixels, for offsetting a clips position, relative to where it would have been positioned. 	* Specify a minimum x and y position at which point the clip will no longer be reflowed. Clips can use either their registration point	* or you can specifiy them to position themselves based off their visible (width*.5, height*.5) center. Clip also supports scaling objects to a stage dimension along with positioning	* clips. Useful for creating footers etc. With the minimum parameters (displayObject, {x, y}), the class defaults to using a "fast path" to improve performance.</p>	* <br /><br />	*	<b>Author:</b> noponies - <a href="http://www.blog.noponies.com/" target="_blank">www.blog.noponies.com</a><br />	* 	<b>Class version:</b> 2 - BETA<br />	* 	<b>Actionscript version:</b> 3.0 Player Version 9.0.28<br />	* 	<b>Copyright: 2009 Noponies</b>	* 	<br />	* 	<b>Date:</b> 08 Jan 2009<br />	*	<b>Contributors - Thank You!</b><br>	*	António Miranda  - http://www.complexresponse.com - Added in offsetH and offsetW props.<br>	*	Diego Nicolás García Gangl - http://www.garciagangl.com.ar/ - Fixed a small bug, added in maxX and maxY parameters.	*/	public class NpFlexLayout extends EventDispatcher {		//--------------------------------------		// PRIVATE PROPERTIES		//--------------------------------------		private var stageInstance:Stage;//stage ref		private var layOutObjects:Dictionary		private var tweenArray:Array		private var easeType:Function = Linear.easeOut;				/**		* NpFlexLayout. The constructor will throw an error if either the stages <code>scaleMode</code> is not set to <code>stage.scaleMode = StageScaleMode.NO_SCALE</code> or if the		* stages <code>align</code> is not set to <code>stage.align = StageAlign.TOP_LEFT</code>. Make sure you set these values in your parent swf!		* @param stageRef Reference to the stage.		* @return void		* @example Flash CS3 Timeline Script Example		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* //minimal constructor arguments		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(blue_mc, {x:0, y:.1,width:1, height:0,offSetY:0})		* 		* </listing>		*/		public function NpFlexLayout(stageRef:Stage) {			//dictionary to hold display object instances in			layOutObjects = new Dictionary(true);			//array to hold tween instances within			tweenArray = [];			stageInstance = stageRef;			//check both scale mode and stage align			if (stageInstance.scaleMode!="noScale") {				throw new Error("The Stage scaleMode must be set to \"noScale\". Currently it is set to " +"\""+stageInstance.scaleMode+"\"");			}			if (stageInstance.align!="TL") {				throw new Error("The Stage scaleMode must be set to \"TL\". Currently it is set to " +"\""+stageInstance.align+"\"");			}		}		//--------------------------------------		// PUBLIC INSTANCE METHODS		//--------------------------------------				/**		* The addTarget method is designed to allow add objects to the NpFlexLayout class at runtime. Each addition of a new display object will call the main <code>reflowObjects</code> method, so your object will automatically		* position itself.		* <p><strong>Some points to note</strong><br/>		* <ul><li>Percentage values are in the 0-1 range</li>		* <li>You can only pass a pixel value to either the x or y values, not both at the same time.</li>		* <li>Optional Params must be wrapped in an Object {} and can appear in any order, or in any amount</li>		* <li>The target parameter is mandatory</li>		* <li>The x, y, offSetX, offSetY, width, height, offSetW, offSetH, useClipRegPoint, minX, minY, maxX, maxY, minWidth, minHeight, maxWidth, maxHeight and constrainResize params are optional</li>		* <li>Setting width or height to a value other an 0 will enable resizing of your passed DisplayObject. This will also allow for you to set minWidth, minHeight, maxWidth, maxHeight and constrainResize properties</li>		 * </ul><br /></p>		* <strong>Possible "vars" Object Properties</strong>		* <ul>		* <li> x Optional (Default = 0) Number horizontal or x postion on the stage (as a PERCENTAGE of the stage OR pass in a pixel value) where you want your object to sit: 0 = left, 1 = full right etc.</li>		* <li> y Optional (Default = 0) Number vertical or y postion on the stage (as a PERCENTAGE of the stage OR pass in a pixel value) where you want your object to sit: 0 = top, 1 = bottom.</li>		* <li> offSetX Optional (Default = 0) Number representing an horizontal or x offset value, of your clips x position. This value is in pixels. This value can be either negative or positive, depending on what direction you wish to offset your clip.</li>		* <li> offSetY Optional (Default = 0) Number representing an vertical or y offset value, of your clips y position. This value is in pixels. This value can be either negative or positive, depending on what direction you wish to offset your clip.</li>		* <li> offSetW Optional (Default = 0) Number representing an width offset for your clips width. For instance, setting it to scale to full browser width, minus 50 px. Allows for finer grained control over scaling of objects</li>		* <li> offSetH Optional (Default = 0) Number representing an height offset for your clips height. For instance, setting it to scale to full browser width, minus 50 px. Allows for finer grained control over scaling of objects</li>		* <li> width Optional (Default = 0) Number representing the width of your object as a (as a PERCENTAGE of the stage width). Setting this to anything other than 0 will make your objects width expand and contract with changes in stage dimensions. </li>		* <li> height Optional (Default = 0) Number representing the height of your object as a (as a PERCENTAGE of the stage height). Setting this to anything other than 0 will make your objects height expand and contract with changes in stage dimensions.</li>		* <li> constrainResize Optional (Default = false) Boolean representing whether or not to constrain the proportions of any resizing of your objects, should you be resizing them.</li>				* <li> minWidth Optional (Default = 0) Number representing the <strong>minimum width</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>width</code> value.</li>		* <li> minHeight Optional (Default = 0) Number representing the <strong>minimum height</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>height</code> value.</li>		* <li> maxWidth Optional (Default = 0) Number representing the <strong>maximum width</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>width</code> value.</li>		* <li> maxHeight Optional (Default = 0) Number representing the <strong>maximum height</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>height</code> value.</li>		* <li> minX Optional (Default = 0) Number representing the <strong>minimum x position</strong>  you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>		* <li> minY Optional (Default = 0) Number representing the <strong>minimum y  position</strong> you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>		* <li> maxX Optional (Default = 0) Number representing the <strong>maximum x position</strong>  you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>		* <li> maxY Optional (Default = 0) Number representing the <strong>maximum y  position</strong> you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>		* <li> useClipRegPoint Optional (Default = false) Boolean <code>true</code> means clip is positioned off its reg point, <code>false</code> means its natural center (height/width) is used.</li>		* </ul>		* @param target DisplayObject you would like to add to the NpFlexLayout classes influence.		* @param vars Object containing the various properties used to resposition and align your DisplayObject.		* @example Various options demonstrated.		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* //Create class instance		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(blue_mc, {x:.5, y:.5});		* //scale a clip across stage dimensions		* stageTest.addTarget(green_mc, {x:5, y:.5,offSetX:-100, useClipRegPoint:true, xmin:500});		*		* stageTest.addTarget(black,  {x:0, y:.1,width:1, height:0,offSetY:0});		* 		* </listing>		* @return void		 */		public function addTarget(target:DisplayObject, vars:Object):void {			//create default Object template			var targObj:Object = {x:0, y:0, useClipRegPoint:false, constrainResize:false, offSetX:0, offSetY:0, offSetW:0, offSetH:0, width:0, height:0, minWidth:0, minHeight:0, minX:0, minY:0, maxX:999999, maxY:999999};			//populate object template with passed in params			for (var i:Object in vars) {				targObj[i] = vars[i];			}			//add elements to dictionary object and instantiate internal NpFlexLayoutItem Class			layOutObjects[target] =  new NpFlexLayoutItem(target, targObj);		}				//--------------------------------------		// PAUSE REFLOW METHOD		//--------------------------------------				/**		* The pauseReflowTarget method is designed to allow you temporarily remove objects from the NpFlexLayout classes influence at runtime.		* <p>The effect of running this method is that the targeted DisplayObject will remove its Event.RESIZE listener. This method is useful if 		* you simply need to remove an disable an object from responding to stage resize events for a short time.</p>		* @param target DisplayObject you would like to remove from the NpFlexLayout classes influence.		* @see #resumeReflowTarget()			* @see #getReflowStatus()				* @return void		* @example Demo of pauseReflowTarget method.		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* import gs.TweenLite;		* //Create class instance		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(blue_mc, .5, 0,{useClipRegPoint:true});		*		* stage.addEventListener(MouseEvent.CLICK, disableResize)		* function disableResize(event:MouseEvent):void{		* 	stageTest.pauseReflowTarget(blue_mc)		* }		* </listing>		*/				public function pauseReflowTarget(target:DisplayObject):void {			try {				layOutObjects[target].disableStageResize();			}				catch(error:Error) {                trace("Problem disabling object " +"\""+target+"\" from responding to Stage Resize Events. Its probably already deleted, or does not exist! "+ error);			}			  		}				//--------------------------------------		// RESUME REFLOW METHOD		//--------------------------------------				/**		* The resumeReflowTarget method is designed to allow you re enable objects that have been temporarily removed from the NpFlexLayout classes influence at runtime.		* <p>The effect of running this method is that the targeted DisplayObject will re add its Event.RESIZE listener if has been removed. This method is useful if 		* you have temporarily disabled an object from listening for Event.RESIZE events, and you need to re enable listening for that event. </p>		* @param target DisplayObject you would like to enable back into the the NpFlexLayout classes influence.		* @see #pauseReflowTarget()		* @see #getReflowStatus()						* @return void		* @example Demo of resumeReflowTarget method.		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* import gs.TweenLite;		* //Create class instance		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(blue_mc, .5, 0,{useClipRegPoint:true});		*		* stage.addEventListener(MouseEvent.CLICK, enableResize)		* function disableResize(event:MouseEvent):void{		* 	stageTest.enableReflowTarget(blue_mc)		* }		* </listing>		*/				public function resumeReflowTarget(target:DisplayObject):void {			try {				layOutObjects[target].renableStageResize();			}				catch(error:Error) {                trace("Problem re enabling object " +"\""+target+"\" responding to Stage Resize Events. Its probably already deleted, or does not exist! "+ error);			}			  		}				//--------------------------------------		// GET PAUSED STATUS METHOD		//--------------------------------------				/**		* The getReflowStatus method is designed to allow you to check the reflowStatus of any DisplayObject under the influence of the NpFlexLayout Class.		* <p>A value of <code>true</code> indicates that a DisplayObject is listening for Event.RESIZE events. A value of <code>false</code> indicates that		* a DisplayObject is not listening for this event.</p>		* @param target DisplayObject you would like to test the reflowStatus of		* @see #resumeReflowTarget()		* @see #pauseReflowTarget()						* @return Boolean		* @example Demo of getReflowStatus method.		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* import gs.TweenLite;		* //Create class instance		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(blue_mc, .5, 0,{useClipRegPoint:true});		*		* stage.addEventListener(MouseEvent.CLICK, checkReflowStatus)		* function checkReflowStatus(event:MouseEvent):void{		* 	stageTest.getReflowStatus(blue_mc)		* }		* </listing>		*/				public function getReflowStatus(target:DisplayObject):Boolean {				return layOutObjects[target].reflowing;  		}				//--------------------------------------		// REMOVE TARGET METHOD		//--------------------------------------				/**		* The removeTarget method is designed to allow you totally remove objects from the NpFlexLayout classes influence at runtime.		* <p>Calling this method is functionally the same as each object controlled by the NpFlexLayout Class recieving a Event.REMOVED_FROM_STAGE		* event. The reference to the DisplayObject is also deleted from the internal Dictionary that catalogues all DisplayObjects under the		* influence of the NpFlexLayout Class. This method is a final concrete <em>delete object from class</em> method. To temporarily disable DisplayObjects		* from the class use the <code>pauseReflowTarget</code> and the <code>resumeReflowTarget</code> methods.</p>		* @param target DisplayObject you would like to remove from the NpFlexLayout classes influence.		* @throw TypeError indicating that you passed an invalid DisplayObject to the NpFlexLayoutClass		* @return void		* @example Demo of removeTarget method.		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* //Create class instance		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(blue_mc, .5, 0,{useClipRegPoint:true});		*		* stage.addEventListener(MouseEvent.CLICK, removeObject)		* function removeObject(event:MouseEvent):void{		* 	stageTest.removeTarget(blue_mc)		* }		* </listing>		*/				public function removeTarget(target:DisplayObject):void {			try {				layOutObjects[target].killClass();   				delete layOutObjects[target];						}				catch(error:Error) {                trace("Problem deleting object " +"\""+target+"\" from Class. Its probably already deleted, or does not exist! "+ error);			}			  		}				//--------------------------------------		// UPDATE OBJECT DIMENSIONS METHOD		//--------------------------------------				/**		* The updateObjectDimensions method is designed to allow you to update the dimensions of your display objects		* dynamically and have the new clip dimensions taken into account in positioning the display object.		* @param target DisplayObject you are currently updating the dimensions of.		* @return void		* @example Tween an Display Object (blue_mc) using TweenLite and its onUpdate Param		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* import gs.TweenLite;		* //Create class instance		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(blue_mc, .5, 0,{useClipRegPoint:true});		*		* stage.addEventListener(MouseEvent.CLICK, tweenObject)		* function tweenObject(event:MouseEvent):void{		* 	TweenLite.to(blue_mc, 1, {width:300, onUpdate:stageTest.updateObjectDimensions, onUpdateParams:[blue_mc]});		* }		* </listing>		*/				public function updateObjectDimensions(target:DisplayObject):void {			if(layOutObjects[target] != undefined){				layOutObjects[target].reflowObjects();			}else{				trace("Passed target DisplayObject " +"\""+target+"\" is not a member of this class");			}		}				//--------------------------------------		// UPDATE OBJECT PROPS METHOD		//--------------------------------------				/**		* The updateObjectProps method is designed to allow you to update the individual properties of your DisplayObject		* dynamically and have the new properties taken into account in positioning the DisplayObject.		* @param target DisplayObject you would like to update the NpFlexLayout Properties of.		* @param vars Object containing the properties you wish to update.		* <br /><br />		* <strong>Possible "vars" Object Properties</strong>		* <ul>		* <li> x Optional (Default = 0) Number horizontal or x postion on the stage (as a PERCENTAGE of the stage OR pass in a pixel value) where you want your object to sit: 0 = left, 1 = full right etc.</li>		* <li> y Optional (Default = 0) Number vertical or y postion on the stage (as a PERCENTAGE of the stage OR pass in a pixel value) where you want your object to sit: 0 = top, 1 = bottom.</li>		* <li> offSetX Optional (Default = 0) Number representing an horizontal or x offset value, of your clips x position. This value is in pixels. This value can be either negative or positive, depending on what direction you wish to offset your clip.</li>		* <li> offSetY Optional (Default = 0) Number representing an vertical or y offset value, of your clips y position. This value is in pixels. This value can be either negative or positive, depending on what direction you wish to offset your clip.</li>		* <li> offSetW Optional (Default = 0) Number representing an width offset for your clips width. For instance, setting it to scale to full browser width, minus 50 px. Allows for finer grained control over scaling of objects</li>		* <li> offSetH Optional (Default = 0) Number representing an height offset for your clips height. For instance, setting it to scale to full browser width, minus 50 px. Allows for finer grained control over scaling of objects</li>		* <li> width Optional (Default = 0) Number representing the width of your object as a (as a PERCENTAGE of the stage width). Setting this to anything other than 0 will make your objects width expand and contract with changes in stage dimensions. </li>		* <li> height Optional (Default = 0) Number representing the height of your object as a (as a PERCENTAGE of the stage height). Setting this to anything other than 0 will make your objects height expand and contract with changes in stage dimensions.</li>		* <li> constrainResize Optional (Default = false) Boolean representing whether or not to constrain the proportions of any resizing of your objects, should you be resizing them.</li>				* <li> minWidth Optional (Default = 0) Number representing the <strong>minimum width</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>width</code> value.</li>		* <li> minHeight Optional (Default = 0) Number representing the <strong>minimum height</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>height</code> value.</li>		* <li> maxWidth Optional (Default = 0) Number representing the <strong>maximum width</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>width</code> value.</li>		* <li> maxHeight Optional (Default = 0) Number representing the <strong>maximum height</strong>  you want your clip to be resized to, after which point, it will not be adjusted. This is a pixel value! Only has an effect if you have set a <code>height</code> value.</li>		* <li> minX Optional (Default = 0) Number representing the <strong>minimum x position</strong>  you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>		* <li> minY Optional (Default = 0) Number representing the <strong>minimum y  position</strong> you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>		* <li> maxX Optional (Default = 0) Number representing the <strong>maximum x position</strong>  you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>		* <li> maxY Optional (Default = 0) Number representing the <strong>maximum y  position</strong> you want your clip to move to, after which point, it will not be adjusted. This is a pixel value!</li>				* <li> useClipRegPoint Optional (Default = false) Boolean <code>true</code> means clip is positioned off its reg point, <code>false</code> means its natural center (height/width) is used.</li>		* </ul>		* <br />		* @throw ReferenceError Traces caught error, indicating that one of the properties passed via the <code>vars</code> object was malformed or incorrect.		* @return void		* @example Update and add Properties to an existing clip controlled by the NpFlexLayout Class.		* <listing version="3.0">		*		* import noponies.display.NpFlexLayout;		* stage.scaleMode = StageScaleMode.NO_SCALE;		* stage.align = StageAlign.TOP_LEFT;		* 		* //Create class instance		* var stageTest:NpFlexLayout = new NpFlexLayout(stage);		* stageTest.addTarget(black, 0, .4, {width:1, height:0,offSetY:0,ymin:150});		*		* stage.addEventListener(MouseEvent.CLICK, updateObject)		*		* function updateObject(event:MouseEvent):void{		* 	stageTest.updateObjectProps(black, {x:.2, y:.9, width:.3, height:0,offSetY:-50,ymin:100})		* }		* </listing>		*/		public function updateObjectProps(target:DisplayObject, vars:Object):void {			try {				for (var value:String in vars) {					layOutObjects[target][value] = vars[value];				}				//once we are done looping through the props of the vars object				//test the fast path property, incase its changed				layOutObjects[target].checkFastPath();				layOutObjects[target].reflowObjects();			}				catch(error:ReferenceError) {                trace(error + " **Allowed properties are: x:Number, y:Number, useClipRegPoint:Boolean, constrainResize:Boolean, offSetW:Number, offSetH:Number, offSetX:Number,offSetY:Number, width:Number, height:Number, minX:Number, minY:Number, maxX:Number, maxY:Number}");			}					}				//--------------------------------------		// TWEEN OBJECT METHOD		//--------------------------------------				/**		* The tweenObject method is designed to allow you to simply tween the  NpFlexLayout properties of an instance controlled by this class.		* <p>The tween is controlled via the built in Adobe tween class. The tweens are referenced in order to ensure they are not grabage collected, and dereferenced when each tween completes.</p>		* <p>By default the easing is Linear.easeOut. You are able to pass in any of the tween easing functions contained within the <code>fl.motion.easing</code> package.</p>		* <p>Tweening properites like maxX or minY will have little effect. If you have set a max or min value, and your tween is likely to move the object into those value ranges, consider changing these values before you		* begin your tween. If you wish to do this, use the <code>updateObjectProps</code> method, then call your tween.</p>		* <p>Dispatches an <code>TweenEvent.MOTION_FINISH</code> when the last tweening proptery completes its tween. You can use this event to reset, or change your objects properties when finished tweening.</p>		* <br /><br />		* <strong>Possible "props" Object Properties</strong>		* <ul>		* <li> x Optional (Default = 0) Number horizontal or x postion on the stage (as a PERCENTAGE of the stage) where you want your object to sit: 0 = left, 1 = full right etc.</li>		* <li> y Optional (Default = 0) Number vertical or y postion on the stage (as a PERCENTAGE of the stage) where you want your object to sit: 0 = top, 1 = bottom.</li>		* <li> offSetX Optional (Default = 0) Number representing an horizontal or x offset value, of your clips x position. This value is in pixels. This value can be either negative or positive, depending on what direction you wish to offset your clip.</li>		* <li> offSetY Optional (Default = 0) Number representing an vertical or y offset value, of your clips y position. This value is in pixels. This value can be either negative or positive, depending on what direction you wish to offset your clip.</li>		* <li> offSetW Optional (Default = 0) Number representing an width offset for your clips width. For instance, setting it to scale to full browser width, minus 50 px. Allows for finer grained control over scaling of objects</li>		* <li> offSetH Optional (Default = 0) Number representing an height offset for your clips height. For instance, setting it to scale to full browser width, minus 50 px. Allows for finer grained control over scaling of objects</li>		* <li> width Optional (Default = 0) Number representing the width of your object as a (as a PERCENTAGE of the stage width). Setting this to anything other than 0 will make your objects width expand and contract with changes in stage dimensions. </li>		* <li> height Optional (Default = 0) Number representing the height of your object as a (as a PERCENTAGE of the stage height). Setting this to anything other than 0 will make your objects height expand and contract with changes in stage dimensions.</li>		* <li> easing Optional (Default = Linear.easeOut) Function representing the easing you want to use with this simple tween function. Eg <code>Elastic.EaseOut</code></li>		* </ul>		* @param target DisplayObject you are want to change a property of.		* @param time Number representing the time you want this transition to take.		* @param props Object containing the properties of the DisplayObject you want to change.		* @see #updateObjectProps		* @see #fl.motion.easing			* @return void		*/		 public function tweenObject(target:DisplayObject,time:Number, props:Object):void {			//first test if we have an ease prop passed in			if(props.easing!==null) {				easeType = props.easing				delete (props.easing);			}			for (var value:String in props) {					var diff:Number = props[value]-layOutObjects[target][value]					//[the prop to chance, amount of change, actual change value, original value]					var twn:Tween = new Tween(target,value,easeType, layOutObjects[target][value],props[value],time,true);					twn.addEventListener(TweenEvent.MOTION_CHANGE, handleTweenChange);					twn.addEventListener(TweenEvent.MOTION_FINISH, handleTweenDone);					//push tween instance into tween array, this reference stops it getting garbage collected					tweenArray.push(twn)				}		} 				//handle the tweens change event, update object pos		private function handleTweenChange(event:TweenEvent):void {				layOutObjects[event.target.obj][event.target.prop]=event.position;				layOutObjects[event.target.obj].reflowObjects();		}				//handle the completion of a tween event		private function handleTweenDone(event:TweenEvent):void {			cleanTweenArray();		}				//remove tween instances from the array containing them		private function cleanTweenArray():void {			for each (var item:Tween in tweenArray) {     			if(!item.isPlaying) {					//kill tween listeners					item.removeEventListener(TweenEvent.MOTION_CHANGE, handleTweenChange);					item.removeEventListener(TweenEvent.MOTION_FINISH, handleTweenDone);					//dispatch a finished event					if(tweenArray.length == 1) item.obj.dispatchEvent(new TweenEvent(TweenEvent.MOTION_FINISH, item.duration, item.position, true, false))					//delete tween reference from array					tweenArray.splice(tweenArray.indexOf(item),1)				}			}		}	 				//--------------------------------------		// KILL CLASS METHOD		//--------------------------------------				/**		* The killClass method is designed to allow you to kill the Event.RESIZE listener used within this class and set the internal layoutObjects array to null.		* @return void		*/		public function killClass():void {			try {				killAnyRunningTweens()				layOutObjects = null;				} catch (error:Error) {				trace("error cleaning up NpFlexLayout class");			}		}				//just incase we kill the class and some tweens are running		private function killAnyRunningTweens():void {			for each (var item:Tween in tweenArray) { 					item.stop();					//kill tween listeners					item.removeEventListener(TweenEvent.MOTION_CHANGE, handleTweenChange);					item.removeEventListener(TweenEvent.MOTION_FINISH, handleTweenDone);					//delete tween reference from array					tweenArray.splice(tweenArray.indexOf(item),1)			}			tweenArray = null;		}	}}