package org.sse.solarsystem {		import be.colorfield.ui.Application;	import org.sse.constant.PrivateParams;		import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;		import org.papervision3d.cameras.CameraType;	import org.papervision3d.cameras.SpringCamera3D;	import org.papervision3d.core.math.Number3D;	import org.papervision3d.materials.BitmapFileMaterial;	import org.papervision3d.materials.ColorMaterial;	import org.papervision3d.materials.WireframeMaterial;	import org.papervision3d.materials.special.CompositeMaterial;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.view.BasicView;		/**	 * Voyage dans le système solaire, classe de test avec une seule planète et 	 * une SpringCamera	 * 	 * EXEMPLE D'UTILISATION DE PAPERVISION3D	 * 	 * @deprecated Classe monolithique qui a été refactorée dans un projet dédié	 */	public class ManualVoyageSpringCamera extends BasicView	{		private var earthSphere:Sphere; 		private var paperPlane:PaperPlane;		private var springCamera:SpringCamera3D; 		private var keyRight:Boolean;		private var keyLeft:Boolean;		private var keyForward:Boolean;		private var keyBackward:Boolean; 		public function ManualVoyageSpringCamera()		{			super(Application.MAIN_STAGE.stageWidth,				  Application.MAIN_STAGE.stageHeight,				  true,false,CameraType.SPRING);			this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}				private function onAddedToStage(e:Event):void {			init();			startRendering();		}				private function onRemovedFromStage(e:Event):void{			// TODO	: supprimer les écouteurs d'événements propres		} 		private function init():void		{				Application.MAIN_STAGE.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			Application.MAIN_STAGE.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);						var camera:SpringCamera3D = SpringCamera3D(camera);			camera.mass = 20;			camera.damping = 10;			camera.stiffness = 1;			camera.positionOffset = new Number3D(0, 150, -500); 			camera.lookOffset = new Number3D(0, 0, 100);			 			var material:BitmapFileMaterial = new BitmapFileMaterial(											      PrivateParams.PATH_IMG_TEXTURES_SPHERE + "earth.jpg");			material.precise = true;						earthSphere = new Sphere(material,200,24,16);			scene.addChild(earthSphere);						for(var i:uint = 0;i <  100; i++)			{ 				var plane:Plane = new Plane(new ColorMaterial(Math.random() * 0xFFFFFF), 50,50, 1,1);				plane.material.doubleSided = true;				scene.addChild(plane);				plane.x = Math.random()*20000 - 10000;				plane.y = Math.random()*1500 - 750;				plane.z = Math.random()*20000 -10000;				plane.localRotationY = Math.random() * 180 - 90;			}						var planeMaterial:CompositeMaterial = new CompositeMaterial();			planeMaterial.addMaterial(new ColorMaterial(0xFFFFFF));			planeMaterial.addMaterial(new WireframeMaterial(0x484848));			planeMaterial.doubleSided = true;			paperPlane = new PaperPlane(planeMaterial);			scene.addChild(paperPlane);			paperPlane.z= -1000;			paperPlane.y = 250;						camera.z = -2000;			camera.focus = 20;			camera.far = 20000;						// cible de la caméra			camera.target = paperPlane;		}		 		private function keyDownHandler(e:KeyboardEvent):void		{				switch( e.keyCode )			{				case "Z".charCodeAt():				case Keyboard.UP:					keyForward = true;					break; 				case "X".charCodeAt():				case Keyboard.DOWN:					keyBackward = true;					break; 				case "Q".charCodeAt():				case Keyboard.LEFT:					keyLeft = true;					break; 				case "D".charCodeAt():				case Keyboard.RIGHT:					keyRight = true;					break;			}		} 		private function keyUpHandler(e:KeyboardEvent):void		{			switch(e.keyCode)			{				case "Z".charCodeAt():				case Keyboard.UP:					keyForward = false;					break; 				case "X".charCodeAt():				case Keyboard.DOWN:					keyBackward = false;					break; 				case "Q".charCodeAt():				case Keyboard.LEFT:					keyLeft = false;					break; 				case "D".charCodeAt():				case Keyboard.RIGHT:					keyRight = false;					break;			}		}				private function moveObject():void		{			// bouge			if(keyForward)			{				paperPlane.moveForward(30);			}			else if(keyBackward)			{				paperPlane.moveBackward(30);			}						// tourne			if(keyRight)			{				paperPlane.localRotationY -=2;			}			else if(keyLeft)			{				paperPlane.localRotationY +=2;			}		}				override protected function onRenderTick(e:Event=null):void		{				earthSphere.localRotationY += 0.2;			moveObject();						super.onRenderTick();		}	}}