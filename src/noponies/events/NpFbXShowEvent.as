/** * AS3 * Copyright 2009 __noponies__ */package noponies.events{	import flash.events.Event;	/**	* Dispatched as a result of a n image completely loading and completing its alphaFade in. When this event is dispatched, the image is displayed.	*	* @eventType NpFbXShowEvent.BG_LOADED	*/	[Event(name="bgloaded",type="noponies.events.NpFbXShowEvent")]	/**	* Dispatched when a slide has changed.	*	* @eventType NpFbXShowEvent.SLIDE_CHANGE	*/	[Event(name="slidechange",type="noponies.events.NpFbXShowEvent")]	/**	* Dispatch this event to the class, and it will load a new slide, eg <code>classInstantiatorVarInstanceName.dispatchEvent(new NpFbXShowEvent(NpFbXShowEvent.LOAD_NEW_SLIDE, true));</code>	*	* @eventType NpFbXShowEvent.LOAD_NEW_SLIDE	*/	[Event(name="loadnewslide",type="noponies.events.NpFbXShowEvent")]	/**	* Dispatch this event to the class, and it will pause the slideshow if the slideshow is in <code>autoPlay</code> mode and is not paused, eg <code>classInstantiatorVarInstanceName.dispatchEvent(new NpFbXShowEvent(NpFbXShowEvent.PAUSE, true));</code>	*	* @eventType NpFbXShowEvent.PAUSE	*/	[Event(name="pause",type="noponies.events.NpFbXShowEvent")]	/**	* Dispatch this event to the class, and it will play the slideshow if the slideshow is in <code>autoPlay</code> mode and is not playing, eg <code>classInstantiatorVarInstanceName.dispatchEvent(new NpFbXShowEvent(NpFbXShowEvent.PLAY, true));</code>	*	* @eventType NpFbXShowEvent.PLAY	*/	[Event(name="play",type="noponies.events.NpFbXShowEvent")]	/**	* Dispatch this event to the class, and it will unload itself, destroying all internal instances, timers etc, eg <code>classInstantiatorVarInstanceName.dispatchEvent(new NpFbXShowEvent(NpFbXShowEvent.UNLOAD_BG, true));</code>	*	* @eventType NpFbXShowEvent.UNLOAD_BG	*/	[Event(name="unloadbg",type="noponies.events.NpFbXShowEvent")]	/**	 *Slideshow custom event class.	 *	 *@langversion ActionScript 3.0	 *@playerversion Flash 9.0	 *	 *@author Dale Sattler	 *@since  21.12.2008	 */	public class NpFbXShowEvent extends Event {		/**		 * The <code>NpFbXShowEvent.BG_LOADED</code> constant defines the value of the <code>type</code> property of the event object for a <code>bgloaded</code> event.	     * <p>	     * The properties of the event object have the following values:	     * </p>	     * <table class="innertable">	     * <tr><th>Property</th> <th>Value</th></tr>	     * <tr><td><code>type</code></td> <td><code>"bgloaded"</code></td></tr>	     * <tr><td><code>bubbles</code></td> <td><code>true</code></td></tr>	     * <tr><td><code>cancelable</code></td> <td><code>false</code></td></tr>	     * </table>	     *	     * @eventType bgloaded	     */		public static  const BG_LOADED:String  = "bgloaded";		/**		 * The <code>NpFbXShowEvent.SLIDE_CHANGE</code> constant defines the value of the <code>type</code> property of the event object for a <code>slidechange</code> event.		 *	@example Flash CS3 Timeline Based Demo.		 		 * <listing version="3.0">		 *  	classInstantiatorVarInstanceName.addEventListener(NpFbXShowEvent.SLIDE_CHANGE, slidesChanged)		 *				 *		function slidesChanged(event:Event){		 *			status_txt.text = "You are currently viewing slide "+classInstantiatorVarInstanceName.currentSlide+ " of "+classInstantiatorVarInstanceName.slidesTotal+" slides";		 *		}		 * </listing>		 	     * <p>	     * The properties of the event object have the following values:	     * </p>	     * <table class="innertable">	     * <tr><th>Property</th> <th>Value</th></tr>	     * <tr><td><code>type</code></td> <td><code>"slidechange"</code></td></tr>	     * <tr><td><code>bubbles</code></td> <td><code>true</code></td></tr>	     * <tr><td><code>cancelable</code></td> <td><code>false</code></td></tr>	     * </table>	     *	     * @eventType slidechange	     */		public static  const SLIDE_CHANGE:String = "slidechange";		/**		 * The <code>NpFbXShowEvent.LOAD_NEW_SLIDE</code> constant defines the value of the <code>type</code> property of the event object for a <code>loadnewslide</code> event.	     * <p>	     * The properties of the event object have the following values:	     * </p>	     * <table class="innertable">	     * <tr><th>Property</th> <th>Value</th></tr>	     * <tr><td><code>type</code></td> <td><code>"loadnewslide"</code></td></tr>	     * <tr><td><code>bubbles</code></td> <td><code>true</code></td></tr>	     * <tr><td><code>cancelable</code></td> <td><code>false</code></td></tr>	     * </table>	     *	     * @eventType loadnewslide	     */				public static  const LOAD_NEW_SLIDE:String  = "loadnewslide";		/**		 * The <code>NpFbXShowEvent.UNLOAD_BG</code> constant defines the value of the <code>type</code> property of the event object for a <code>unloadbg</code> event.	     * <p>	     * The properties of the event object have the following values:	     * </p>	     * <table class="innertable">	     * <tr><th>Property</th> <th>Value</th></tr>	     * <tr><td><code>type</code></td> <td><code>"unloadbg"</code></td></tr>	     * <tr><td><code>bubbles</code></td> <td><code>true</code></td></tr>	     * <tr><td><code>cancelable</code></td> <td><code>false</code></td></tr>	     * </table>	     *	     * @eventType unloadbg	     */					public static  const UNLOAD_BG:String  = "unloadbg";		/**		 * The <code>NpFbXShowEvent.PAUSE</code> constant defines the value of the <code>type</code> property of the event object for a <code>pause</code> event.	     * <p>	     * The properties of the event object have the following values:	     * </p>	     * <table class="innertable">	     * <tr><th>Property</th> <th>Value</th></tr>	     * <tr><td><code>type</code></td> <td><code>"pause"</code></td></tr>	     * <tr><td><code>bubbles</code></td> <td><code>true</code></td></tr>	     * <tr><td><code>cancelable</code></td> <td><code>false</code></td></tr>	     * </table>	     *	     * @eventType pause	     */					public static  const PAUSE:String  = "pause";		/**		 * The <code>NpFbXShowEvent.PLAY</code> constant defines the value of the <code>type</code> property of the event object for a <code>play</code> event.	     * <p>	     * The properties of the event object have the following values:	     * </p>	     * <table class="innertable">	     * <tr><th>Property</th> <th>Value</th></tr>	     * <tr><td><code>type</code></td> <td><code>"play"</code></td></tr>	     * <tr><td><code>bubbles</code></td> <td><code>true</code></td></tr>	     * <tr><td><code>cancelable</code></td> <td><code>false</code></td></tr>	     * </table>	     *	     * @eventType play	     */					public static  const PLAY:String  = "play";		//--------------------------------------		//  PUBLIC VARIABLES		//--------------------------------------		//--------------------------------------		//  CONSTRUCTOR		//--------------------------------------		/**		 *@constructor		 */		public function NpFbXShowEvent( type:String, bubbles:Boolean=true, cancelable:Boolean=false ) {			super(type, bubbles, cancelable);		}		//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------		override public function clone():Event {			return new NpFbXShowEvent(type, bubbles, cancelable);		}		override public function toString():String {			return formatToString("NpFbXShowEvent","type","bubbles","cancelable","eventPhase");		}	}}