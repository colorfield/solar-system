package be.colorfield.ui.layout{			import be.colorfield.ui.Application;	import be.colorfield.ui.screen.IScreen;	import be.colorfield.ui.screen.ScreenManager;	import be.colorfield.ui.screen.ScreenAbstract;		import de.polygonal.ds.SLinkedList;		import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;		import noponies.ui.NpFlexLayout;		import org.sse.ui.container.FooterPanel;	import org.sse.ui.control.MainMenu;		/**	 * View principale	 */	public class MainGUI extends Sprite	{				// singleton		private static var INSTANCE:MainGUI;				private static var stageRef:Stage;				// Layout, accessible depuis toute page		// délégation du positionnement à une application tierce		public var layout:NpFlexLayout;				// Classes graphiques (views) étendant MovieClip 		// et réalisées comme telles via l'environnement auteur Flash Professional CS5		// celles-ci sont contenues dans une bibliothèque partagée à l'exécution (gui.swc)		private static var abg:ApplicationBg;		private static var fbs:MainBackgroundSlide		private static var mainMenuBg:MainMenuBg;		public static var mainMenu:MainMenu;		private static var footerPanel:FooterPanel;				private static var screenManager:ScreenManager;		private static var hasFullBackgroundSlide:Boolean; 				/**		 * Construction des invariants (template)		 * et conteneur des différents écrans.		 */		public function MainGUI(pvt:SingletonPrivateClass)		{			stageRef = Application.MAIN_STAGE;			// setup du layout			// Classe static, pas de nécessité de passer cette référence			// (application tierce)			layout = new NpFlexLayout(stageRef);			// écoute de l'événement de redimensionnement			stageRef.addEventListener(Event.RESIZE, resizer);						createTemplate();						// test Singleton ok			// var screenManager2 = ScreenManager.getInstance();		}				public static function getInstance():MainGUI{						if(MainGUI.INSTANCE == null){				MainGUI.INSTANCE = new MainGUI(new SingletonPrivateClass());			}else{				//trace("MainGUI déjà instanciée");			}						return MainGUI.INSTANCE;		}						// TODO : à revoir de manière plus souple pour être réutilisé		public function addFullBackgroundSlide():void{			/*			trace(ScreenManager.curScreen);						if(ScreenManager.curScreen == firstScreen){				fbs.visible = true;				MainGUI.hasFullBackgroundSlide = true;			}else{				fbs.visible = false;				MainGUI.hasFullBackgroundSlide = false;			}			//trace("ADD BG SLIDE");			*/		}				// On supprime tout, question de performances !		public function removeFullBackgroundSlide():void{			if(fbs != null){				//removeChild(MainGUI.fbs);				fbs.visible = false;				removeChild(fbs);				//trace("RM BG SLIDE");			}		}				public function toggleFullBackgroundSlide(){			if(MainGUI.hasFullBackgroundSlide){				removeFullBackgroundSlide()			}else{				addFullBackgroundSlide();			}			}				/**		 * Création des invariants du template graphique		 * n'est appelé que la première fois		 */		private function createTemplate(){			// background affiché en attente du slideShow			// et pour les écrans ne disposant pas de ce dernier			MainGUI.abg = new ApplicationBg();			MainGUI.abg.cacheAsBitmap = true;			// slideShow			MainGUI.fbs = new MainBackgroundSlide();						// menu principal, footer, home			MainGUI.mainMenuBg = new MainMenuBg();			MainGUI.mainMenuBg.cacheAsBitmap = true;			MainGUI.mainMenu = new MainMenu();			MainGUI.footerPanel = new FooterPanel();			MainGUI.footerPanel.cacheAsBitmap = true;						ScreenManager.main = this;			ScreenAbstract.main = this;			screenManager = ScreenManager.getInstance();		}						/**		 * Affichage des éléments de l'arrière-plan		 */		public function displayTemplateBackground():void{						addChild(MainGUI.abg);			addChild(fbs);			addFullBackgroundSlide();						// ajout au gestionnaire de layout			layout.addTarget(MainGUI.abg, {x:0,y:0,width:1,height:1});		}				/**		 * Affichage des éléments de l'avant-plan		 */		public function displayTemplateForeground():void{					addChild(MainGUI.mainMenuBg);			addChild(MainGUI.mainMenu);			addChild(MainGUI.footerPanel);						// ajout au gestionnaire de layout			layout.addTarget(MainGUI.mainMenuBg, {x:0,y:0,width:1});			layout.addTarget(MainGUI.mainMenu, {x:0.5,y:0});			layout.addTarget(MainGUI.footerPanel, {x:0,y:1,width:1,offSetY:-footerPanel.height});		}				private static function resizer(event:Event = null):void {			//test.x = stage.stageWidth * .5 - test.width * .5;		}				/**		 * Supprime tous les éléments de MainGUI		 */		public function removeAllElements(){			/*			layout.removeTarget(MainGUI.abg);			layout.removeTarget(MainGUI.mainMenuBg);			layout.removeTarget(MainGUI.mainMenu);			layout.removeTarget(MainGUI.footerPanel);			*/			while(this.numChildren) 			{ 				//trace("remove child : " +  this.getChildAt(0));				this.removeChildAt(0); 			}					}					}	}//----------- Singletoninternal class SingletonPrivateClass{}